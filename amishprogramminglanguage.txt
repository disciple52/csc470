;global variables
(define listOfOperators '(+ - * /))

;generic helper functions
;returns true if val is found in lst
(define contains
  (lambda (val lst)
    (cond
      ((null? lst) #f)
      ((eq? (car lst) val) #t)
      (else (contains val (cdr lst))))))
;functions related to the variable environment
(define empty-env
  (lambda () '()))

(define empty-scope
  (lambda () '()))

(define extend-scope
  (lambda (var val scope)
    (cons (list var val) scope)))

;list of scopes where each list is a 2list
(define extend-env
  (lambda (scope env)
    (cons scope env)))

(define apply-scope
  (lambda (var scope)
    (cond
      ((null? scope) #f)
      ((eq? (caar scope) var) (cadar scope))
      (else (apply-scope var (cdr scope))))))

(define apply-env ;boils down to the value of the variable or #false
  (lambda (var env)
    (cond
      ((null? env) #f)
      (else (let ((resolved (apply-scope var (car env))))
        (if (eq? resolved #f)
            (apply-env var (cdr env))
            resolved))))))

;-----------------------
;constructors related to the LCE types
(define lit-exp
  (lambda (lit) lit))

;Var -> Lc-exp
(define var-exp
  (lambda (id) id))

;;;(var-exp '(a))

;Var x Lc-exp ->Lc-exp
(define lambda-exp
  (lambda (params body)
    (list 'lambda params body)))

;;;(lambda-exp (var-exp 'a) (var-exp 'b))

;Lc-exp x Lc-exp -> Lc-exp
(define app-exp
  (lambda (operator operands)
    (append (list operator) operands)))

;;;(lambda-exp (var-exp 'a) (app-exp (var-exp 'b) (var-exp 'c)))

;unparsed "string" version
;;;(define anExp '(lambda (y z) (a b)))
;parsed version (called in terms of constructors)
(define parsed '(lambda-exp (lambda-exp (var-exp 'x )
                                       (app-exp (var-exp 'a) (var-exp 'b)))))

;return true if the given symbol is a reserved op and false otherwise

;parser helper functions
;returns true if s is an operator, false otherwise
(define op?
  (lambda (s)
    (contains s listOfOperators)))
;core parser functions
;our version of parse
(define parse-exp
  (lambda (lcExp)
    (cond
      ((number? lcExp) (list 'lit-exp lcExp))
      ((symbol? lcExp) (if (op? lcExp)
                           (list 'op-exp lcExp)
                           (list 'var-exp lcExp)))
      ((eq? (car lcExp) 'lambda)
       (list 'lambda-exp
             (cadr lcExp)
             (parse-exp (caddr lcExp))))
      (else (cons 'app-exp (append (list (parse-exp (car lcExp))) (map parse-exp (cdr lcExp))))))))

;do stuff
;;;(parse-exp anExp)

;do more stuff
;;;anExp
;;;(parse-exp anExp)
;;;(unparse-exp (parse-exp anExp))

;------------
(define extend-env-4-lambda-helper
  (lambda (lovars lovals scope)
    (cond
      ((not (null? lovars)) (extend-env-4-lambda-helper
                             (cdr lovars)
                             (cdr lovals)
                             (extend-scope (car lovars) (car lovals) scope)))
      (else scope))))


(define extend-env-4-lambda
  (lambda (lovars lovals env) ;list of vars and list of values and a current environemnt
    (extend-env
     (extend-env-4-lambda-helper lovars lovals (empty-scope)) ;builds up to be a new scope and then extend our env with that scope
     env)));;;support storing for expressions -> store a parsed representation (rather than pre-resolving them)

;evaluates an appexpression who's car is an operator
(define eval-op-exp
  (lambda (appExp env)
    appExp))

(define eval-exp
  (lambda (lce env)
    (cond
      ((eq? (car lce) 'lit-exp) (cadr lce)) 
      ((eq? (car lce) 'var-exp) (apply-env (cadr lce) env))
      ((eq? (car lce) 'lambda-exp) (eval-exp (caddr lce) env))
      (else
       (cond
         ((eq? (list-ref (list-ref lce 1) 0) 'lambda-exp)
           ;first element of app-exp is a lambda
           (eval-exp (list-ref (list-ref lce 1) 2)
                     (extend-env-4-lambda
                      (list-ref (list-ref lce 1) 1)
                      (map (lambda (x)
                             (if (eq? (car x) 'lambda-exp)
                                 x
                                 (eval-exp x env))) (cddr lce)) env)))
         ((eq? (list-ref lce 1) 0) 'op-exp)
         ;first element of app-exp is an op-exp (+ 1 2)
         
         (else
           ;first element of app-exp is a var-exp
           (let ((theLambda (eval-exp (list-ref lce 1) env))
                 (theInputs (map (lambda (x)
                             (if (eq? (car x) 'lambda-exp)
                                 x
                                 (eval-exp x env))) (cddr lce))))
             (eval-exp theLambda (extend-env-4-lambda (list-ref theLambda 1)
                                                      theInputs
                                                      env)))))))))        

(define run-program
  (lambda (lce)
    (eval-exp lce (empty-env)))) ;create empty environment and then execute main()
                   
;do testing stuff
;(apply + '(1 2)) ;;;Identify my break with a 3 haha
;(define anExp2 '((lambda (a b) b) 5 6))
;(define anExp2 '((lambda ()7)))

(define anExp2 '((lambda (a b c) (a b c)) (lambda (x y) (+ x y)) 5 6))
;(define anExp2 '(lambda (a b) (a b)))

(parse-exp anExp2)
(run-program (parse-exp anExp2))

;-------------Exlude in homework 10----------
;----example of how it should look-----------
;(define env (empty-env))
;(define scope (empty-scope))
;(set! scope (extend-scope 'a 5 scope)) ;set! updates the current variable environment to change the value of scope to this new variable
;(set! scope (extend-scope 'b '(lambda-exp (a) (var-exp a)) scope))